// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black sprite around
 * the screen, and change the sprite's size during the movement.
 * When the game starts, a sprite of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the sprite as follows.
 * The 4 arrow keys are used to move the sprite up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the sprite's size. The 'q' key is used to quit the game.
 */

 class SpriteHandler {
    field Sprite sprite; // the sprite of this game
    field int direction; // the sprite's current direction: 
                         // 0=none, 1=up, 2=down, 3=left, 4=right
 
    /** Constructs a new Square Game. */
    constructor SpriteHandler new() {
       // Creates a 30 by 30 pixels sprite and positions it at the top-left
       // of the screen.
       let sprite = Sprite.new(0, 0);
       let direction = 0;  // initial state is no movement
       return this;
    }
 
    /** Disposes this game. */
    method void dispose() {
       do sprite.dispose();
       do Memory.deAlloc(this);
       return;
    }
 
    /** Moves the sprite in the current direction. */
    method void moveSprite() {
       if (direction = 1) { do sprite.moveUp(); }
       if (direction = 2) { do sprite.moveDown(); }
       if (direction = 3) { do sprite.moveLeft(); }
       if (direction = 4) { do sprite.moveRight(); }
       do Sys.wait(5);  // delays the next movement
       return;
    }
 
    /** Runs the game: handles the user's inputs and moves the sprite accordingly */
    method void run() {
       var char key;  // the key currently pressed by the user
       var boolean exit;
       let exit = false;
       
       while (~exit) {
          // waits for a key to be pressed
          while (key = 0) {
             let key = Keyboard.keyPressed();
             do moveSprite();
          }
          if (key = 81)  { let exit = true; }     // q key
          if (key = 131) { let direction = 1; }   // up arrow
          if (key = 133) { let direction = 2; }   // down arrow
          if (key = 130) { let direction = 3; }   // left arrow
          if (key = 132) { let direction = 4; }   // right arrow
 
          // waits for the key to be released
          while (~(key = 0)) {
             let key = Keyboard.keyPressed();
             do moveSprite();
          }
      } // while
      return;
    }
 }
 
 
 
 